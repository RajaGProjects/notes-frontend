{"version":3,"sources":["constants/api.ts","services/notesService.ts","components/Note/Note.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NOTES_API_URL","process","getNotes","a","axios","get","response","data","notes","console","error","createNote","newNote","post","reponse","note","log","deleteNote","noteToDeleteId","url","delete","reply","updateNote","noteToUpdate","_id","put","updatedNote","Note","onNoteUpdate","onNoteDelete","useState","isFocused","setIsFocused","className","onClick","type","onBlur","e","newTextValue","currentTarget","textContent","text","updatedNoteobject","onFocus","contentEditable","suppressContentEditableWarning","href","link","App","notesList","setNotesList","ShowAddModal","setShowAddModal","handleCloseAddModal","setNewNote","handleShowAddModal","useEffect","getNotesFromServer","updateNoteItem","noteFromServer","updatedList","map","noteItem","addNote","savedNote","deleteNoteItem","noteToDelete","remainingNotes","filter","Button","variant","Modal","show","onHide","Header","closeButton","Title","Body","FloatingLabel","controlId","label","Form","Control","onChange","event","NewVal","value","as","placeholder","style","height","Footer","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a227fdd5.chunk.js","sourcesContent":["export const API_BASE_URL = process.env.REACT_APP_BACKEND;\r\n\r\nexport const NOTES_API_URL = `${API_BASE_URL}/notes`;\r\n","import axios from \"axios\";\r\nimport { NOTES_API_URL } from \"../constants/api\";\r\nimport INote from \"../interfaces/note.interface\";\r\n\r\nexport const getNotes = async () => {\r\n  try {\r\n    const response = await axios.get(NOTES_API_URL);\r\n    return response.data.notes;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const createNote = async (newNote: Partial<INote>) => {\r\n  try {\r\n    const reponse = await axios.post(NOTES_API_URL, newNote);\r\n    return reponse.data.note;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deleteNote = async (noteToDeleteId: string) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToDeleteId}`;\r\n    const response = await axios.delete(url);\r\n    return response.data.reply;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const updateNote = async (noteToUpdate: INote) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToUpdate._id}`;\r\n    const response = await axios.put(url, noteToUpdate);\r\n    return response.data.updatedNote;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import { FC, FocusEvent, useState } from \"react\"; // Importing Functional Component and it used to define type\r\nimport INote from \"../../interfaces/note.interface\";\r\nimport \"./Note.css\";\r\n\r\ntype Props = {\r\n  note: INote;\r\n  onNoteUpdate: (note: INote) => void;\r\n  onNoteDelete: (note: INote) => void;\r\n  //   onNoteUpdate: Function;\r\n};\r\n\r\nconst Note: FC<Props> = ({ note, onNoteUpdate, onNoteDelete }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const noteTextUpdated = (e: FocusEvent<HTMLDivElement>) => {\r\n    setIsFocused(false);\r\n    console.log(\"note text change\");\r\n    const newTextValue = e.currentTarget.textContent;\r\n    if (newTextValue === note.text) {\r\n      return;\r\n    }\r\n    const updatedNoteobject: INote = {\r\n      ...note,\r\n      text: newTextValue || \"\",\r\n    };\r\n    // console.log(e.currentTarget.textContent);\r\n    onNoteUpdate(updatedNoteobject);\r\n  };\r\n\r\n  return (\r\n    <div className={isFocused ? \"note note--focused\" : \"note\"}>\r\n      <button\r\n        onClick={() => {\r\n          onNoteDelete(note);\r\n        }}\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n      <div\r\n        onBlur={noteTextUpdated}\r\n        onFocus={() => {\r\n          setIsFocused(true);\r\n        }}\r\n        contentEditable={true}\r\n        suppressContentEditableWarning={true}\r\n        className=\"note__text\"\r\n      >\r\n        {note.text}\r\n      </div>\r\n      <div className=\"note__link\">\r\n        <a href={note.link}>link</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  deleteNote,\r\n  createNote,\r\n  getNotes,\r\n  updateNote,\r\n} from \"./services/notesService\";\r\n// import DUMMY_NOTES from \"./DUMMY_NOTES\";\r\nimport Note from \"./components/Note/Note\";\r\nimport INote from \"./interfaces/note.interface\";\r\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  // const getNotes = () =>{\r\n  //   console.log('we are awesome')\r\n  // }\r\n  // let notesList: any[] = []; //note list variable\r\n\r\n  const [notesList, setNotesList] = useState<Array<INote>>([]);\r\n  const [ShowAddModal, setShowAddModal] = useState(false);\r\n  const handleCloseAddModal = () => {\r\n    setNewNote({\r\n      link: \"\",\r\n      text: \"\",\r\n    });\r\n    setShowAddModal(false);\r\n  };\r\n  const handleShowAddModal = () => setShowAddModal(true);\r\n\r\n  const [newNote, setNewNote] = useState<Partial<INote>>({\r\n    link: \"\",\r\n    text: \"\",\r\n  });\r\n  // const [notesList, setNotesList] = useState<any[]>([]);\r\n\r\n  // App components renders first time get items from local storage\r\n  // useEffect(() => {\r\n  //   const listFromStorageString = localStorage.getItem(\"my-notes\");\r\n  //   if (listFromStorageString) {\r\n  //     const listFromStorageArray = JSON.parse(listFromStorageString);\r\n  //     setNotesList(listFromStorageArray);\r\n  //   } else {\r\n  //     setNotesList(DUMMY_NOTES);\r\n  //   }\r\n  // }, []);\r\n  useEffect(() => {\r\n    getNotesFromServer();\r\n  }, []);\r\n\r\n  const getNotesFromServer = async () => {\r\n    const notes = await getNotes();\r\n    setNotesList(notes);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"saving to localstorage\");\r\n  //   const notesListString = JSON.stringify(notesList);\r\n  //   localStorage.setItem(\"my-notes\", notesListString);\r\n  // }, [notesList]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"noteList list value changed\");\r\n  //   console.log(notesList);\r\n  // }, [notesList]);\r\n\r\n  // get notes method\r\n  // async function getNotes() {\r\n  //   try {\r\n  //     const response = await axios.get(\"http://localhost:5000/notes\");\r\n  //     // noteslist = response.data.notes;\r\n  //     setNotesList(response.data.notes);\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //   }\r\n  // }\r\n  // console.log(\"rerendering\");\r\n  // console.log(notesList);\r\n  const updateNoteItem = async (updatedNote: INote) => {\r\n    const noteFromServer = await updateNote(updatedNote);\r\n    // temporary variable\r\n    const updatedList = notesList.map((noteItem: INote) => {\r\n      if (noteItem._id === noteFromServer._id) {\r\n        return noteFromServer;\r\n      }\r\n      return noteItem;\r\n    });\r\n    setNotesList(updatedList); // updating the state of notes list\r\n  };\r\n\r\n  const addNote = async () => {\r\n    const savedNote = await createNote(newNote);\r\n    setNotesList([...notesList, savedNote]);\r\n    handleShowAddModal();\r\n  };\r\n  const deleteNoteItem = async (noteToDelete: INote) => {\r\n    await deleteNote(noteToDelete._id);\r\n    const remainingNotes = notesList.filter((noteItem) => {\r\n      return noteItem._id !== noteToDelete._id;\r\n    });\r\n    setNotesList(remainingNotes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"t1-main\">Notes Application</div>\r\n      <Button\r\n        variant=\"dark\"\r\n        className=\"add-button\"\r\n        onClick={handleShowAddModal}\r\n      >\r\n        +\r\n      </Button>\r\n\r\n      <Modal show={ShowAddModal} onHide={handleCloseAddModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Note</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FloatingLabel controlId=\"floatingTextarea2\" label=\"Comments\">\r\n            <Form.Control\r\n              onChange={(event) => {\r\n                const NewVal = event.currentTarget.value;\r\n                setNewNote({\r\n                  ...newNote,\r\n                  text: NewVal,\r\n                });\r\n              }}\r\n              as=\"textarea\"\r\n              placeholder=\"Enter your text\"\r\n              style={{ height: \"100px\" }}\r\n            />\r\n          </FloatingLabel>\r\n          <FloatingLabel\r\n            controlId=\"floatingTextarea\"\r\n            label=\"Link\"\r\n            className=\"mb-3 note-link\"\r\n          >\r\n            <Form.Control\r\n              onChange={(event) => {\r\n                const NewVal = event.currentTarget.value;\r\n                setNewNote({\r\n                  ...newNote,\r\n                  text: NewVal,\r\n                });\r\n              }}\r\n              type=\"url\"\r\n              placeholder=\"Enter note Url\"\r\n            />\r\n          </FloatingLabel>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleCloseAddModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={addNote}>\r\n            Create\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div className=\"notes-list\">\r\n        {notesList.map((noteItem, index) => {\r\n          return (\r\n            <Note\r\n              note={noteItem}\r\n              onNoteUpdate={updateNoteItem}\r\n              onNoteDelete={deleteNoteItem}\r\n              key={index}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}